# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
name: 'Terraform Workflow'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform Workflow'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Vérifier le contenu du répertoire pour s'assurer que les fichiers sont bien présents
    - name: List files
      run: |
        echo "Current directory content:"
        ls -la
        echo "Root directory content:"
        ls -la $GITHUB_WORKSPACE

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: .

    # Générer un fichier de configuration de base si aucun n'est trouvé
    - name: Create basic configuration if none exists
      run: |
        if [ ! -f "*.tf" ]; then
          echo "No .tf files found, creating a basic configuration"
          cat > main.tf << 'EOL'
          # Basic Azure configuration
          terraform {
            required_providers {
              azurerm = {
                source  = "hashicorp/azurerm"
                version = "~> 3.0"
              }
            }
          }

          provider "azurerm" {
            features {}
          }

          resource "azurerm_resource_group" "terraformRG" {
            name     = "terraformRG-resources"
            location = "East US"
          }
          EOL
        fi

   # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

    # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false